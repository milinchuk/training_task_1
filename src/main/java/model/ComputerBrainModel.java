package model;

import model.entity.Attempt;
import model.entity.Result;
import model.utils.Util;

import java.util.Random;

/**
 * Computer Brain Model is main logic of game. Here computer to set up secret number from interval.
 * Check if number of user more, les or equals to secret number. Set up attempt, generate and retrieve result to user.
 *
 * @author Anastasia Milinchuk
 * @since 10/30/2016
 */
public class ComputerBrainModel {
    /**
     * Secret number which is generated by computer
     */
    private int secretNumber;

    /**
     * Start of interval
     */
    private int x;

    /**
     * End of interval
     */
    private int y;

    /**
     * Initialize computer brain model. Generation of secret number
     *
     * @param x is start of interval
     * @param y is end of interval
     */
    public ComputerBrainModel(int x, int y) {
        this.x = x;
        this.y = y;
        Random random = new Random();
        secretNumber = random.nextInt(y - x) + x;
    }

    public int getX() {
        return x;
    }

    public int getY() {
        return y;
    }

    /**
     * Checking number which user propose. Generating result in case of input number
     *
     * @param number is input user number
     * @param result is {@link model.entity.Result} which computer retrieve
     */
    public void check(int number, Result result){
        int answer = Integer.compare(number, secretNumber);

        Attempt attempt = new Attempt(number);
        switch (answer){
            case -1:
                attempt.setMessage(Result.MORE);
                break;
            case 0:
                attempt.setMessage(Result.EQUAL);
                result.setIsCorrect(true);
                break;
            case 1:
                attempt.setMessage(Result.LESS);
                break;
        }
        result.setAttempt(attempt);
        result.addPreviousAttempt(result.getAttempt());
    }

    /**
     * Return current interval
     * @return string interval
     */
    public String getRange(){
        return Util.rangeToString(x, y);
    }
}
